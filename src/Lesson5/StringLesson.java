package Lesson5;

import java.util.Arrays;

public class StringLesson {
    public static void main(String[] args) {
        //char - –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—Ö 16 –±–∏—Ç - 1 —Å–∏–º–≤–æ–ª
        // –æ—Ç 0 –¥–æ 65536 '\u0000' –¥–æ '\uffff'

        char char1 = 'J'; // —Å–∏–º–≤–æ–ª
        char char2 = 74;  // –Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞
        char char3 = '\u0044';  // 16 —Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ escape

        // –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        System.out.print(char1+ " ");
        System.out.print(char2 + " ");
        System.out.print(char3 + " ");

        System.out.println("\n–°—Ç—Ä–æ–∫–∏");

        // —Å—Ç—Ä–æ–∫–∞ - —É–ø–æ—Ä—è–¥–æ—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤, —Å—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø, —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ String
        // new String() - –µ—Å–ª–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –∫–∞–≤—ã—á–∫–∏ –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω
        // —Å—Ä–æ–∫—É –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è - –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
        System.out.println("–°—Ç—Ä–æ–∫–æ–≤—ã–π –ª–∏—Ç–µ—Ä–∞–ª - —ç—Ç–æ —Ç–µ–∫—Å—Ç —Ç–æ–∂–µ —Å—Ç—Ä–æ–∫–∞");
        char[] chars = {'\u004A', '\u004A', '\u0044'};
        String  jjdString = new String(chars);
        System.out.println(jjdString);
        System.out.println(jjdString.length());

        char[] chars1 = {'\uD83D', '\uDC38'};
        String  frogString = new String(chars1);
        System.out.println(frogString); //üê∏
        System.out.println(frogString.length()); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ char
        System.out.println(frogString.codePoints().count()); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤

        // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–æ JAVA 9, —Å—Ç—Ä–æ–∫–∏ —Ä–∞–Ω–∏–ª–∏—Å—å –º–∞—Å—Å–∏–≤ char[] –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF - 16
        // –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª 2 –±–∞–π—Ç–∞

        // –ù–∞—á–∏–Ω–∞—è —Å 9  –≤–µ—Ä—Å–∏–∏ –∫–∞–∫ –º–∞—Å—Å–∏–≤ byte[] + —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫—É
        // LATIN1 –∏–ª–∏ UTF - 16

        //–ü—É–ª —Å—Ç—Ä–æ–∫
        // –ù–∞–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ - —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞
        // new String() - –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç –≤ –ø—É–ª–ª —Å—Ç—Ä–æ–∫

        String string1 = "–°—Ç—Ä–æ–∫–∞";
        String string2 = "–°—Ç—Ä–æ–∫–∞"; // —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ –º–µ—Å—Ç–æ –≤ –ø—É–ª–µ —Å—Ç—Ä–æ–∫        String string3 = new String("–°—Ç—Ä–æ–∫–∞"); //heap -–ø–∞–º—è—Ç—å
        String string3 = new String("–°—Ç—Ä–æ–∫–∞");
        String internString  = string3.intern(); // internString - —Å—Ç—Ä–æ–∫–∞ –∏–∑ –ø—É–ª–∞
        string3 = null;

        string1 = "–°—Ç—Ä–æ–∫–∞";
        string2 = "–°—Ç—Ä–æ–∫–∞";

        System.out.println(string1.equals(string2));
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(string2));
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equalsIgnoreCase(string2));

        //string2 = null;

        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(string2));
        System.out.println(string2.equals("—Å—Ç—Ä–æ–∫–∞")); //–≤–µ—Ä—Ö–Ω–∏–π —Å–ø–æ—Å–æ–± –ª—É—á—à–µ, –¥–ª—è —Å–∏—Ç—É–∞—Ü–∏–∏ –∫–æ–≥–¥–∞ string2 = null –æ—à–∏–±–∫–∞ - NullPointerException

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null - –æ–±—ã—á–Ω–æ–µ —Å—Ç—Ä–∞–≤–Ω–µ–Ω–∏–µ string2 == null

        string1 = "Java";
        string2 = "Python";

        // –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∞
        String concatString =  string1 + " :: " + string2;
        System.out.println(concatString);

        concatString = string1.concat(" :: ").concat(string2);

        concatString = String.join(" :: ", string1, string2); // –æ–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

        concatString = "";
        for (int i = 0; i < 10; i+=1 ) {
            concatString = i + "";
        }

        //—Ç–∞–∫ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫, –º–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∏—Ç—å –ø–∞–º—è—Ç–∏

        //StringBuilder - —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ
        //StringBuffer - –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö

        concatString = "–ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ ";
        StringBuilder sb = new StringBuilder(concatString); //StringBuilder sb = new StringBuilder(); - –º–æ–∂–Ω–æ —Ç–∞–∫
        sb.append(string1).append(" :: ").append(string2);

        StringBuilder sb2 = new StringBuilder();
        for (int i = 0; i < 10; i+=1 ) {
            sb2.append(i).append(" ");
        }
        System.out.println(sb2); // –≤ println —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ .toString

        String sbString = sb2.toString();
        System.out.println(sbString);

        // split()

        String langs = "Java, Python, JavaScript";
        String[] langArr = langs.split(", "); // –¥–µ–ª–∏—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
        System.out.println(Arrays.toString(langArr));

        // –º–µ—Ç–æ–¥—ã –∑–∞–º–µ–Ω—ã
        String newString = langs.replaceAll(", ", " - "); //—Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–≥—É–ª—è—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
        System.out.println(newString);

        newString = langs.replace(", ", " - "); // –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
        System.out.println(newString);

        System.out.println(langs.contains("th")); // —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–æ—Å–ª–µ–¥ —Å–∏–º–≤–æ–ª–æ–≤ true/false
        System.out.println(langs.startsWith("th")); // –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å –ø–æ—Å–ª–µ–¥ —Å–∏–º–≤–æ–ª–æ–≤ true/false
        System.out.println(langs.endsWith("th")); // –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø–æ—Å–ª–µ–¥ —Å–∏–º–≤–æ–ª–æ–≤ true/false
        System.out.println(langs.startsWith("a", 1)); // —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏  –ø–æ—Å–ª–µ–¥ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞—á–∏–Ω–∞—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞ true/false



    }
}
